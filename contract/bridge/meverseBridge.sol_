pragma solidity ^0.8.0;

import "./token/ERC20/IERC20.sol";
import "./token/ERC20/utils/SafeERC20.sol";
import "./TokenRegistry.sol";

contract MeverseBridge is TokenRegistry {
    address private _bank;
    address private _feeOwner;
    address private _meverseToken;
    
    uint256 feeFactorMax = 10000;

    
    mapping(string => uint256) public transferFeeInfoToChain;
    mapping(string => uint256) public tokenFeeInfoFromChain;
    
    mapping(address => mapping(string => uint256)) public getSequenceFrom;
    mapping(address => mapping(string => uint256)) public getSequenceTo;

    event SetTransferFeeInfo(
        address _from,
        string _chain,
        uint256 _transferFee
    );
    
    event SetTokenFeeInfo(
        address _from,
        string _chain,
        uint256 _tokenFee
    );

    event SentToGateway(
        address _token,
        address _from,
        address _to,
        uint256 _amount,
        address[] _path,
        bytes32 _summary,
        uint256 _sequence
    );
    event SentToGatewayCoin(
        address _from,
        address _to,
        uint256 _amount,
        address[] _path,
        bytes32 _summary,
        uint256 _sequence
    );
    event SentFromGatewayCoin(
        address _from,
        address _to,
        uint256 _amountIn,
        uint256 _amountOutMin,
        address[] _path,
        bytes32 _summary,
        uint256 _sequence
    );
    event SentFromGateway(
        address _token,
        address _from,
        address _to,
        uint256 _amountIn,
        uint256 _amountOutMin,
        address[] _path,
        bytes32 _summary,
        uint256 _sequence
    );
    event BankOwnershipTransferred(
        address indexed previousBank,
        address indexed newBank
    );
    event MeverseAddressChanged(
        address indexed previousToken,
        address indexed newToken
    );
    
    event FeeOwnershipTransferred(
        address indexed previousFeeOwner,
        address indexed newFeeOwner
    );
    event ApprovedToGateway(
        address _token,
        address _from,
        address _to,
        uint256 _amount
    );
    event WithdrawedCoin(address _from, uint256 _amount, bytes _data);
    event ReclaimToken(address _token);
    event ReclaimCoin(address _owner);
    event Received(address, uint);
    
    constructor () {
        // _setMeverseToken(meverse);
        _setFeeOwner(_msgSender());
        _setBank(_msgSender());
    }

    modifier onlyBanker() {
        require(bank() == _msgSender(), "Ownable: caller is not the banker");
        _;
    }
    
    function meverseToken() public view virtual returns (address) {
        return _meverseToken;
    }
    
    function bank() public view virtual returns (address) {
        return _bank;
    }
    
    function feeOwner() public view virtual returns (address) {
        return _feeOwner;
    }
    
    function setTransferFeeInfo(
        string memory chain,
        uint256 transferFee
    ) public onlyOwner {
        transferFeeInfoToChain[chain] = transferFee;
		emit SetTransferFeeInfo(msg.sender, chain, transferFee);
    }
    
    function setTokenFeeInfo(
        string memory chain,
        uint256 tokenFee
    ) public onlyOwner {
        tokenFeeInfoFromChain[chain] = tokenFee;
		emit SetTokenFeeInfo(msg.sender, chain, tokenFee);
    }
    
    function transferBankOwnership(address newBank) public virtual onlyOwner {
        require(
            newBank != address(0),
            "Bankable: new banker is the zero address"
        );
        _setBank(newBank);
    }
    function changeMeverseAddress(address newTokenAddress) public virtual onlyOwner {
        require(
            newTokenAddress != address(0),
            "FeeOwnable: new FeeOwner is the zero address"
        );
        _setMeverseToken(newTokenAddress);
    }
    
    function transferFeeOwnership(address newFeeOwner) public virtual onlyOwner {
        require(
            newFeeOwner != address(0),
            "FeeOwnable: new FeeOwner is the zero address"
        );
        _setFeeOwner(newFeeOwner);
    }
    
    function _setMeverseToken(address newToken) private {
        address oldToken = _meverseToken;
        _meverseToken = newToken;
        emit MeverseAddressChanged(oldToken, newToken);
    }
    
    function _setBank(address newBank) private {
        address oldBank = _bank;
        _bank = newBank;
        emit BankOwnershipTransferred(oldBank, newBank);
    }
    
    function _setFeeOwner(address newFeeOwner) private {
        address oldFeeOwner = _feeOwner;
        _feeOwner = newFeeOwner;
        emit FeeOwnershipTransferred(oldFeeOwner, newFeeOwner);
    }

    function withdrawCoin(address _to) external onlyOwner returns (bool) {
        (bool sent, bytes memory data) = _to.call{value: address(this).balance}(
            ""
        );
        require(sent, "Failed to send Ether");

        emit WithdrawedCoin(_to, address(this).balance, data);
        return true;
    }

    function allowanceTokenFromGateway(address token, address from)
        external
        view
        returns (uint256)
    {
        return IERC20(token).allowance(from, address(this));
    }

    function balanceOfToGateway(address token, address from)
        external
        view
        returns (uint256)
    {
        return IERC20(token).balanceOf(from);
    }
    
    function equals(string memory a, string memory b) public pure returns (bool) {
        if (bytes(a).length != bytes(b).length) {
            return false;
        } else {
            return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));
        }
    }
    
    function sendToGatewayCoin(
        uint256 amount,
        address[] memory path,
        string memory toChain,
        bytes32 summary
    ) external payable returns (bool) {
        uint256 sendValue = msg.value;
        uint256 transferFee = SafeMath.sub(sendValue, amount);
        
        require(
            transferFee == transferFeeInfoToChain[toChain],
            "sendToGatewayCoin: amount is not valid"
        );
        
        if (transferFee > 0) {
            payable(feeOwner()).transfer(transferFee);
        }
        getSequenceFrom[_msgSender()][toChain]++;
        
        emit SentToGatewayCoin(
            _msgSender(),
            address(this),
            amount,
            path,
            summary,
            getSequenceFrom[_msgSender()][toChain]
        );
        return true;
    }

    function sendFromGatewayCoin(
        address to,
        uint256 amount,
        address[] memory path,
        string memory fromChain,
        bytes32 summary
    ) external payable onlyBanker returns (bool) {
        require(
            address(this).balance >= amount,
            "sendFromGatewayCoin: insufficient contract balance"
        );
        uint256 caldAmount;
        {
            uint256 coinFee;
            if (equals(fromChain, "MEVERSE") && tokenFeeInfoFromChain[fromChain] > 0) {
                coinFee = amount * tokenFeeInfoFromChain[fromChain] / feeFactorMax;
                payable(feeOwner()).transfer(coinFee);
            }
            caldAmount = SafeMath.sub(amount, coinFee);
        }
        {
            payable(to).transfer(caldAmount);
            getSequenceTo[to][fromChain]++;
        }
        emit SentFromGatewayCoin(
            address(this),
            to,
            caldAmount,
            caldAmount,
            path,
            summary,
            getSequenceTo[to][fromChain]
        );
        return true;
    }

    function sendFromGateway(
        address token,
        address to,
        uint256 amount,
        address[] memory path,
        string memory fromChain,
        bytes32 summary
    ) external onlyBanker returns (bool) {
        uint256 amountChangedDecimal = getTokenAmount(fromChain, token, amount);
        require(
            IERC20(token).balanceOf(address(this)) >= amountChangedDecimal,
            "sendFromGateway: insufficient contract balance"
        );
        uint256 tokenFee;
        if (equals(fromChain, "MEVERSE") && meverseToken() != token) {
            tokenFee = amountChangedDecimal * tokenFeeInfoFromChain[fromChain] / feeFactorMax;
            SafeERC20.safeTransfer(IERC20(token), feeOwner(), tokenFee);
        }
        uint256 caldAmount = SafeMath.sub(amountChangedDecimal, tokenFee);
        
        SafeERC20.safeTransfer(IERC20(token), to, caldAmount);
        getSequenceTo[to][fromChain]++;
        address beneficiary = to;
        emit SentFromGateway(
            token,
            address(this),
            beneficiary,
            caldAmount,
            caldAmount,
            path,
            summary,
            getSequenceTo[beneficiary][fromChain]
        );
        return true;
    }

    function sendToGateway(
        address token,
        uint256 amount,
        address[] memory path,
        string memory toChain,
        bytes32 summary
    ) external payable returns (bool) {
        uint256 transferFee = msg.value;
        require(
            transferFee == transferFeeInfoToChain[toChain],
            "sendToGateway: fee is not valid"
        );
        require(
            IERC20(token).allowance(_msgSender(), address(this)) >= amount,
            "sendToGateway: insufficient allowance"
        );
        SafeERC20.safeTransferFrom(
            IERC20(token),
            _msgSender(),
            address(this),
            amount
        );
        if (transferFee > 0) {
            payable(feeOwner()).transfer(transferFee);
        }
        getSequenceFrom[_msgSender()][toChain]++;
        emit SentToGateway(
            token,
            _msgSender(),
            address(this),
            amount,
            path,
            summary,
            getSequenceFrom[_msgSender()][toChain]
        );
        return true;
    }

    function reclaimToken(address token, uint256 amount)
        external
        onlyOwner
        returns (bool)
    {
        uint256 balance = IERC20(token).balanceOf(address(this));
        require(
            balance >= amount,
            "reclaimToken: insufficient contract balance"
        );
        SafeERC20.safeTransfer(IERC20(token), _msgSender(), amount);
        emit ReclaimToken(address(token));

        return true;
    }

    function reclaimCoin(address payable to, uint256 amount)
        external
        onlyOwner
        returns (bool)
    {
        require(address(this).balance >= amount, "reclaimCoin: exceeded balance");
        
        to.transfer(amount);
        emit ReclaimCoin(msg.sender);
        return true;
    }

    function stringToBytes32(string memory source)
        public
        pure
        returns (bytes32 result)
    {
        bytes memory tempEmptyStringTest = bytes(source);
        if (tempEmptyStringTest.length == 0) {
            return 0x0;
        }

        assembly {
            result := mload(add(source, 32))
        }
    }
    
    receive() external payable {
        emit Received(msg.sender, msg.value);
    }
}